/* tslint:disable */
/* eslint-disable */
/**
 * Leekwars API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import type {AxiosResponse, AxiosInstance, AxiosRequestConfig} from "axios";
import globalAxios from "axios";
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * GardenApi - axios parameter creator
 * @export
 */
export const GardenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary garden - get-composition-opponents
         * @param {number} compositionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenGetCompositionOpponentsGet: async (compositionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compositionId' is not null or undefined
            if (compositionId === null || compositionId === undefined) {
                throw new RequiredError('compositionId','Required parameter compositionId was null or undefined when calling gardenGetCompositionOpponentsGet.');
            }
            const localVarPath = `/garden/get-composition-opponents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (compositionId !== undefined) {
                localVarQueryParameter['composition_id'] = compositionId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - get-farmer-opponents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenGetFarmerOpponentsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/garden/get-farmer-opponents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - get-leek-opponents
         * @param {number} leekId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenGetLeekOpponentsGet: async (leekId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leekId' is not null or undefined
            if (leekId === null || leekId === undefined) {
                throw new RequiredError('leekId','Required parameter leekId was null or undefined when calling gardenGetLeekOpponentsGet.');
            }
            const localVarPath = `/garden/get-leek-opponents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (leekId !== undefined) {
                localVarQueryParameter['leek_id'] = leekId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-farmer-challenge
         * @param {number} targetId 
         * @param {number} seed 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartFarmerChallengePost: async (targetId: number, seed: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartFarmerChallengePost.');
            }
            // verify required parameter 'seed' is not null or undefined
            if (seed === null || seed === undefined) {
                throw new RequiredError('seed','Required parameter seed was null or undefined when calling gardenStartFarmerChallengePost.');
            }
            const localVarPath = `/garden/start-farmer-challenge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-farmer-fight
         * @param {number} targetId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartFarmerFightPost: async (targetId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartFarmerFightPost.');
            }
            const localVarPath = `/garden/start-farmer-fight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-solo-challenge
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartSoloChallengePost: async (leekId: number, targetId: number, seed: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leekId' is not null or undefined
            if (leekId === null || leekId === undefined) {
                throw new RequiredError('leekId','Required parameter leekId was null or undefined when calling gardenStartSoloChallengePost.');
            }
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartSoloChallengePost.');
            }
            // verify required parameter 'seed' is not null or undefined
            if (seed === null || seed === undefined) {
                throw new RequiredError('seed','Required parameter seed was null or undefined when calling gardenStartSoloChallengePost.');
            }
            const localVarPath = `/garden/start-solo-challenge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (leekId !== undefined) {
                localVarQueryParameter['leek_id'] = leekId;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-solo-fight
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartSoloFightPost: async (leekId: number, targetId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leekId' is not null or undefined
            if (leekId === null || leekId === undefined) {
                throw new RequiredError('leekId','Required parameter leekId was null or undefined when calling gardenStartSoloFightPost.');
            }
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartSoloFightPost.');
            }
            const localVarPath = `/garden/start-solo-fight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (leekId !== undefined) {
                localVarQueryParameter['leek_id'] = leekId;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-team-challenge
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartTeamChallengePost: async (compositionId: number, targetId: number, seed: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compositionId' is not null or undefined
            if (compositionId === null || compositionId === undefined) {
                throw new RequiredError('compositionId','Required parameter compositionId was null or undefined when calling gardenStartTeamChallengePost.');
            }
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartTeamChallengePost.');
            }
            // verify required parameter 'seed' is not null or undefined
            if (seed === null || seed === undefined) {
                throw new RequiredError('seed','Required parameter seed was null or undefined when calling gardenStartTeamChallengePost.');
            }
            const localVarPath = `/garden/start-team-challenge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (compositionId !== undefined) {
                localVarQueryParameter['composition_id'] = compositionId;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-team-fight
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartTeamFightPost: async (compositionId: number, targetId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compositionId' is not null or undefined
            if (compositionId === null || compositionId === undefined) {
                throw new RequiredError('compositionId','Required parameter compositionId was null or undefined when calling gardenStartTeamFightPost.');
            }
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartTeamFightPost.');
            }
            const localVarPath = `/garden/start-team-fight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (compositionId !== undefined) {
                localVarQueryParameter['composition_id'] = compositionId;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GardenApi - functional programming interface
 * @export
 */
export const GardenApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary garden - get-composition-opponents
         * @param {number} compositionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetCompositionOpponentsGet(compositionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenGetCompositionOpponentsGet(compositionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - get-farmer-opponents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetFarmerOpponentsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenGetFarmerOpponentsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - get-leek-opponents
         * @param {number} leekId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetLeekOpponentsGet(leekId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenGetLeekOpponentsGet(leekId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-farmer-challenge
         * @param {number} targetId 
         * @param {number} seed 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartFarmerChallengePost(targetId: number, seed: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartFarmerChallengePost(targetId, seed, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-farmer-fight
         * @param {number} targetId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartFarmerFightPost(targetId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartFarmerFightPost(targetId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-solo-challenge
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartSoloChallengePost(leekId: number, targetId: number, seed: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartSoloChallengePost(leekId, targetId, seed, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-solo-fight
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartSoloFightPost(leekId: number, targetId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartSoloFightPost(leekId, targetId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-team-challenge
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartTeamChallengePost(compositionId: number, targetId: number, seed: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartTeamChallengePost(compositionId, targetId, seed, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-team-fight
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartTeamFightPost(compositionId: number, targetId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartTeamFightPost(compositionId, targetId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GardenApi - factory interface
 * @export
 */
export const GardenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary garden - get-composition-opponents
         * @param {number} compositionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetCompositionOpponentsGet(compositionId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GardenApiFp(configuration).gardenGetCompositionOpponentsGet(compositionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - get-farmer-opponents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetFarmerOpponentsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GardenApiFp(configuration).gardenGetFarmerOpponentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - get-leek-opponents
         * @param {number} leekId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetLeekOpponentsGet(leekId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GardenApiFp(configuration).gardenGetLeekOpponentsGet(leekId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-farmer-challenge
         * @param {number} targetId 
         * @param {number} seed 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartFarmerChallengePost(targetId: number, seed: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GardenApiFp(configuration).gardenStartFarmerChallengePost(targetId, seed, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-farmer-fight
         * @param {number} targetId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartFarmerFightPost(targetId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GardenApiFp(configuration).gardenStartFarmerFightPost(targetId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-solo-challenge
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartSoloChallengePost(leekId: number, targetId: number, seed: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GardenApiFp(configuration).gardenStartSoloChallengePost(leekId, targetId, seed, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-solo-fight
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartSoloFightPost(leekId: number, targetId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GardenApiFp(configuration).gardenStartSoloFightPost(leekId, targetId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-team-challenge
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartTeamChallengePost(compositionId: number, targetId: number, seed: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GardenApiFp(configuration).gardenStartTeamChallengePost(compositionId, targetId, seed, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-team-fight
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartTeamFightPost(compositionId: number, targetId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GardenApiFp(configuration).gardenStartTeamFightPost(compositionId, targetId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GardenApi - object-oriented interface
 * @export
 * @class GardenApi
 * @extends {BaseAPI}
 */
export class GardenApi extends BaseAPI {
    /**
     * 
     * @summary garden - get-composition-opponents
     * @param {number} compositionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenGetCompositionOpponentsGet(compositionId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GardenApiFp(this.configuration).gardenGetCompositionOpponentsGet(compositionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - get-farmer-opponents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenGetFarmerOpponentsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GardenApiFp(this.configuration).gardenGetFarmerOpponentsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - get-leek-opponents
     * @param {number} leekId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenGetLeekOpponentsGet(leekId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GardenApiFp(this.configuration).gardenGetLeekOpponentsGet(leekId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-farmer-challenge
     * @param {number} targetId 
     * @param {number} seed 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartFarmerChallengePost(targetId: number, seed: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GardenApiFp(this.configuration).gardenStartFarmerChallengePost(targetId, seed, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-farmer-fight
     * @param {number} targetId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartFarmerFightPost(targetId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GardenApiFp(this.configuration).gardenStartFarmerFightPost(targetId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-solo-challenge
     * @param {number} leekId 
     * @param {number} targetId 
     * @param {number} seed 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartSoloChallengePost(leekId: number, targetId: number, seed: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GardenApiFp(this.configuration).gardenStartSoloChallengePost(leekId, targetId, seed, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-solo-fight
     * @param {number} leekId 
     * @param {number} targetId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartSoloFightPost(leekId: number, targetId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GardenApiFp(this.configuration).gardenStartSoloFightPost(leekId, targetId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-team-challenge
     * @param {number} compositionId 
     * @param {number} targetId 
     * @param {number} seed 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartTeamChallengePost(compositionId: number, targetId: number, seed: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GardenApiFp(this.configuration).gardenStartTeamChallengePost(compositionId, targetId, seed, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-team-fight
     * @param {number} compositionId 
     * @param {number} targetId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartTeamFightPost(compositionId: number, targetId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GardenApiFp(this.configuration).gardenStartTeamFightPost(compositionId, targetId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
