/* tslint:disable */
/* eslint-disable */
/**
 * Leekwars API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import type {AxiosInstance, AxiosRequestConfig, AxiosResponse} from "axios";
import globalAxios from "axios";
import { Configuration } from '@/common/api';
import type {RequestArgs} from "@/common/api/base";
import {BASE_PATH, BaseAPI, RequiredError} from "@/common/api/base";
/**
 * GardenApi - axios parameter creator
 * @export
 */
export const GardenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary garden - get-composition-opponents
         * @param {number} compositionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenGetCompositionOpponentsGet: async (compositionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compositionId' is not null or undefined
            if (compositionId === null || compositionId === undefined) {
                throw new RequiredError('compositionId','Required parameter compositionId was null or undefined when calling gardenGetCompositionOpponentsGet.');
            }
            const localVarPath = `/garden/get-composition-opponents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (compositionId !== undefined) {
                localVarQueryParameter['composition_id'] = compositionId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - get-farmer-opponents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenGetFarmerOpponentsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/garden/get-farmer-opponents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - get-leek-opponents
         * @param {number} leekId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenGetLeekOpponentsGet: async (leekId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leekId' is not null or undefined
            if (leekId === null || leekId === undefined) {
                throw new RequiredError('leekId','Required parameter leekId was null or undefined when calling gardenGetLeekOpponentsGet.');
            }
            const localVarPath = `/garden/get-leek-opponents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (leekId !== undefined) {
                localVarQueryParameter['leek_id'] = leekId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-farmer-challenge
         * @param {number} targetId 
         * @param {number} seed 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartFarmerChallengePostForm: async (targetId: number, seed: number, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartFarmerChallengePostForm.');
            }
            // verify required parameter 'seed' is not null or undefined
            if (seed === null || seed === undefined) {
                throw new RequiredError('seed','Required parameter seed was null or undefined when calling gardenStartFarmerChallengePostForm.');
            }
            const localVarPath = `/garden/start-farmer-challenge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-farmer-fight
         * @param {number} targetId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartFarmerFightPostForm: async (targetId: number, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartFarmerFightPostForm.');
            }
            const localVarPath = `/garden/start-farmer-fight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-solo-challenge
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartSoloChallengePostForm: async (leekId: number, targetId: number, seed: number, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leekId' is not null or undefined
            if (leekId === null || leekId === undefined) {
                throw new RequiredError('leekId','Required parameter leekId was null or undefined when calling gardenStartSoloChallengePostForm.');
            }
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartSoloChallengePostForm.');
            }
            // verify required parameter 'seed' is not null or undefined
            if (seed === null || seed === undefined) {
                throw new RequiredError('seed','Required parameter seed was null or undefined when calling gardenStartSoloChallengePostForm.');
            }
            const localVarPath = `/garden/start-solo-challenge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (leekId !== undefined) {
                localVarQueryParameter['leek_id'] = leekId;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-solo-fight
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartSoloFightPostForm: async (leekId: number, targetId: number, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leekId' is not null or undefined
            if (leekId === null || leekId === undefined) {
                throw new RequiredError('leekId','Required parameter leekId was null or undefined when calling gardenStartSoloFightPostForm.');
            }
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartSoloFightPostForm.');
            }
            const localVarPath = `/garden/start-solo-fight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (leekId !== undefined) {
                localVarQueryParameter['leek_id'] = leekId;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-team-challenge
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartTeamChallengePostForm: async (compositionId: number, targetId: number, seed: number, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compositionId' is not null or undefined
            if (compositionId === null || compositionId === undefined) {
                throw new RequiredError('compositionId','Required parameter compositionId was null or undefined when calling gardenStartTeamChallengePostForm.');
            }
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartTeamChallengePostForm.');
            }
            // verify required parameter 'seed' is not null or undefined
            if (seed === null || seed === undefined) {
                throw new RequiredError('seed','Required parameter seed was null or undefined when calling gardenStartTeamChallengePostForm.');
            }
            const localVarPath = `/garden/start-team-challenge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (compositionId !== undefined) {
                localVarQueryParameter['composition_id'] = compositionId;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary garden - start-team-fight
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gardenStartTeamFightPostForm: async (compositionId: number, targetId: number, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compositionId' is not null or undefined
            if (compositionId === null || compositionId === undefined) {
                throw new RequiredError('compositionId','Required parameter compositionId was null or undefined when calling gardenStartTeamFightPostForm.');
            }
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling gardenStartTeamFightPostForm.');
            }
            const localVarPath = `/garden/start-team-fight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (compositionId !== undefined) {
                localVarQueryParameter['composition_id'] = compositionId;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GardenApi - functional programming interface
 * @export
 */
export const GardenApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary garden - get-composition-opponents
         * @param {number} compositionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetCompositionOpponentsGet(compositionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenGetCompositionOpponentsGet(compositionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - get-farmer-opponents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetFarmerOpponentsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenGetFarmerOpponentsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - get-leek-opponents
         * @param {number} leekId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetLeekOpponentsGet(leekId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenGetLeekOpponentsGet(leekId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-farmer-challenge
         * @param {number} targetId 
         * @param {number} seed 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartFarmerChallengePostForm(targetId: number, seed: number, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartFarmerChallengePostForm(targetId, seed, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-farmer-fight
         * @param {number} targetId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartFarmerFightPostForm(targetId: number, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartFarmerFightPostForm(targetId, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-solo-challenge
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartSoloChallengePostForm(leekId: number, targetId: number, seed: number, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartSoloChallengePostForm(leekId, targetId, seed, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-solo-fight
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartSoloFightPostForm(leekId: number, targetId: number, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartSoloFightPostForm(leekId, targetId, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-team-challenge
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartTeamChallengePostForm(compositionId: number, targetId: number, seed: number, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartTeamChallengePostForm(compositionId, targetId, seed, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary garden - start-team-fight
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartTeamFightPostForm(compositionId: number, targetId: number, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GardenApiAxiosParamCreator(configuration).gardenStartTeamFightPostForm(compositionId, targetId, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GardenApi - factory interface
 * @export
 */
export const GardenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary garden - get-composition-opponents
         * @param {number} compositionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetCompositionOpponentsGet(compositionId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GardenApiFp(configuration).gardenGetCompositionOpponentsGet(compositionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - get-farmer-opponents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetFarmerOpponentsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GardenApiFp(configuration).gardenGetFarmerOpponentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - get-leek-opponents
         * @param {number} leekId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenGetLeekOpponentsGet(leekId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GardenApiFp(configuration).gardenGetLeekOpponentsGet(leekId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-farmer-challenge
         * @param {number} targetId 
         * @param {number} seed 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartFarmerChallengePostForm(targetId: number, seed: number, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GardenApiFp(configuration).gardenStartFarmerChallengePostForm(targetId, seed, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-farmer-fight
         * @param {number} targetId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartFarmerFightPostForm(targetId: number, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GardenApiFp(configuration).gardenStartFarmerFightPostForm(targetId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-solo-challenge
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartSoloChallengePostForm(leekId: number, targetId: number, seed: number, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GardenApiFp(configuration).gardenStartSoloChallengePostForm(leekId, targetId, seed, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-solo-fight
         * @param {number} leekId 
         * @param {number} targetId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartSoloFightPostForm(leekId: number, targetId: number, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GardenApiFp(configuration).gardenStartSoloFightPostForm(leekId, targetId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-team-challenge
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {number} seed 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartTeamChallengePostForm(compositionId: number, targetId: number, seed: number, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GardenApiFp(configuration).gardenStartTeamChallengePostForm(compositionId, targetId, seed, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary garden - start-team-fight
         * @param {number} compositionId 
         * @param {number} targetId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gardenStartTeamFightPostForm(compositionId: number, targetId: number, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GardenApiFp(configuration).gardenStartTeamFightPostForm(compositionId, targetId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GardenApi - object-oriented interface
 * @export
 * @class GardenApi
 * @extends {BaseAPI}
 */
export class GardenApi extends BaseAPI {
    /**
     * 
     * @summary garden - get-composition-opponents
     * @param {number} compositionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenGetCompositionOpponentsGet(compositionId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GardenApiFp(this.configuration).gardenGetCompositionOpponentsGet(compositionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - get-farmer-opponents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenGetFarmerOpponentsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GardenApiFp(this.configuration).gardenGetFarmerOpponentsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - get-leek-opponents
     * @param {number} leekId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenGetLeekOpponentsGet(leekId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GardenApiFp(this.configuration).gardenGetLeekOpponentsGet(leekId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-farmer-challenge
     * @param {number} targetId 
     * @param {number} seed 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartFarmerChallengePostForm(targetId: number, seed: number, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GardenApiFp(this.configuration).gardenStartFarmerChallengePostForm(targetId, seed, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-farmer-fight
     * @param {number} targetId 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartFarmerFightPostForm(targetId: number, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GardenApiFp(this.configuration).gardenStartFarmerFightPostForm(targetId, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-solo-challenge
     * @param {number} leekId 
     * @param {number} targetId 
     * @param {number} seed 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartSoloChallengePostForm(leekId: number, targetId: number, seed: number, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GardenApiFp(this.configuration).gardenStartSoloChallengePostForm(leekId, targetId, seed, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-solo-fight
     * @param {number} leekId 
     * @param {number} targetId 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartSoloFightPostForm(leekId: number, targetId: number, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GardenApiFp(this.configuration).gardenStartSoloFightPostForm(leekId, targetId, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-team-challenge
     * @param {number} compositionId 
     * @param {number} targetId 
     * @param {number} seed 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartTeamChallengePostForm(compositionId: number, targetId: number, seed: number, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GardenApiFp(this.configuration).gardenStartTeamChallengePostForm(compositionId, targetId, seed, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary garden - start-team-fight
     * @param {number} compositionId 
     * @param {number} targetId 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GardenApi
     */
    public async gardenStartTeamFightPostForm(compositionId: number, targetId: number, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GardenApiFp(this.configuration).gardenStartTeamFightPostForm(compositionId, targetId, file, options).then((request) => request(this.axios, this.basePath));
    }
}
