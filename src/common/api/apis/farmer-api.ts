/* tslint:disable */
/* eslint-disable */
/**
 * Leekwars API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import type {AxiosInstance, AxiosRequestConfig, AxiosResponse} from "axios";
import globalAxios from "axios";
import { Configuration } from '@/common/api';
import type {RequestArgs} from "@/common/api/base";
import {BASE_PATH, BaseAPI, RequiredError} from "@/common/api/base";
/**
 * FarmerApi - axios parameter creator
 * @export
 */
export const FarmerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary farmer - change-country
         * @param {string} countryCode 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerChangeCountryPostForm: async (countryCode: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode','Required parameter countryCode was null or undefined when calling farmerChangeCountryPostForm.');
            }
            const localVarPath = `/farmer/change-country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - contributors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerContributorsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farmer/contributors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - get-connected
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerGetConnectedGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farmer/get-connected`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - get-from-token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerGetFromTokenGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farmer/get-from-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - get
         * @param {number} farmerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerGetGet: async (farmerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'farmerId' is not null or undefined
            if (farmerId === null || farmerId === undefined) {
                throw new RequiredError('farmerId','Required parameter farmerId was null or undefined when calling farmerGetGet.');
            }
            const localVarPath = `/farmer/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (farmerId !== undefined) {
                localVarQueryParameter['farmer_id'] = farmerId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - login-token
         * @param {string} login 
         * @param {string} password 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerLoginTokenPostForm: async (login: string, password: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError('login','Required parameter login was null or undefined when calling farmerLoginTokenPostForm.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling farmerLoginTokenPostForm.');
            }
            const localVarPath = `/farmer/login-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (login !== undefined) {
                localVarQueryParameter['login'] = login;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - register-tournament
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerRegisterTournamentPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farmer/register-tournament`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - rename-crystals
         * @param {string} name 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerRenameCrystalsPostForm: async (name: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling farmerRenameCrystalsPostForm.');
            }
            const localVarPath = `/farmer/rename-crystals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - rename-habs
         * @param {string} name 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerRenameHabsPostForm: async (name: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling farmerRenameHabsPostForm.');
            }
            const localVarPath = `/farmer/rename-habs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - rich-tooltip
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerRichTooltipGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling farmerRichTooltipGet.');
            }
            const localVarPath = `/farmer/rich-tooltip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - set-avatar
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerSetAvatarPostForm: async (file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farmer/set-avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - set-github
         * @param {string} github 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerSetGithubPostForm: async (github: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'github' is not null or undefined
            if (github === null || github === undefined) {
                throw new RequiredError('github','Required parameter github was null or undefined when calling farmerSetGithubPostForm.');
            }
            const localVarPath = `/farmer/set-github`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (github !== undefined) {
                localVarQueryParameter['github'] = github;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - set-in-garden
         * @param {boolean} inGarden 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerSetInGardenPostForm: async (inGarden: boolean, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inGarden' is not null or undefined
            if (inGarden === null || inGarden === undefined) {
                throw new RequiredError('inGarden','Required parameter inGarden was null or undefined when calling farmerSetInGardenPostForm.');
            }
            const localVarPath = `/farmer/set-in-garden`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (inGarden !== undefined) {
                localVarQueryParameter['in_garden'] = inGarden;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - set-language
         * @param {string} language 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerSetLanguagePut: async (language: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling farmerSetLanguagePut.');
            }
            const localVarPath = `/farmer/set-language`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - set-show-ai-lines
         * @param {boolean} showAiLines 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerSetShowAiLinesPut: async (showAiLines: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'showAiLines' is not null or undefined
            if (showAiLines === null || showAiLines === undefined) {
                throw new RequiredError('showAiLines','Required parameter showAiLines was null or undefined when calling farmerSetShowAiLinesPut.');
            }
            const localVarPath = `/farmer/set-show-ai-lines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (showAiLines !== undefined) {
                localVarQueryParameter['show_ai_lines'] = showAiLines;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - set-title
         * @param {number} icon 
         * @param {number} noun 
         * @param {number} gender 
         * @param {number} adjective 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerSetTitlePut: async (icon: number, noun: number, gender: number, adjective: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'icon' is not null or undefined
            if (icon === null || icon === undefined) {
                throw new RequiredError('icon','Required parameter icon was null or undefined when calling farmerSetTitlePut.');
            }
            // verify required parameter 'noun' is not null or undefined
            if (noun === null || noun === undefined) {
                throw new RequiredError('noun','Required parameter noun was null or undefined when calling farmerSetTitlePut.');
            }
            // verify required parameter 'gender' is not null or undefined
            if (gender === null || gender === undefined) {
                throw new RequiredError('gender','Required parameter gender was null or undefined when calling farmerSetTitlePut.');
            }
            // verify required parameter 'adjective' is not null or undefined
            if (adjective === null || adjective === undefined) {
                throw new RequiredError('adjective','Required parameter adjective was null or undefined when calling farmerSetTitlePut.');
            }
            const localVarPath = `/farmer/set-title`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (icon !== undefined) {
                localVarQueryParameter['icon'] = icon;
            }

            if (noun !== undefined) {
                localVarQueryParameter['noun'] = noun;
            }

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }

            if (adjective !== undefined) {
                localVarQueryParameter['adjective'] = adjective;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - set-website
         * @param {string} website 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerSetWebsitePostForm: async (website: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'website' is not null or undefined
            if (website === null || website === undefined) {
                throw new RequiredError('website','Required parameter website was null or undefined when calling farmerSetWebsitePostForm.');
            }
            const localVarPath = `/farmer/set-website`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (website !== undefined) {
                localVarQueryParameter['website'] = website;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary farmer - unregister-tournament
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerUnregisterTournamentPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farmer/unregister-tournament`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FarmerApi - functional programming interface
 * @export
 */
export const FarmerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary farmer - change-country
         * @param {string} countryCode 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerChangeCountryPostForm(countryCode: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerChangeCountryPostForm(countryCode, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - contributors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerContributorsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerContributorsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - get-connected
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerGetConnectedGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerGetConnectedGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - get-from-token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerGetFromTokenGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerGetFromTokenGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - get
         * @param {number} farmerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerGetGet(farmerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerGetGet(farmerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - login-token
         * @param {string} login 
         * @param {string} password 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerLoginTokenPostForm(login: string, password: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerLoginTokenPostForm(login, password, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - register-tournament
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerRegisterTournamentPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerRegisterTournamentPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - rename-crystals
         * @param {string} name 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerRenameCrystalsPostForm(name: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerRenameCrystalsPostForm(name, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - rename-habs
         * @param {string} name 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerRenameHabsPostForm(name: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerRenameHabsPostForm(name, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - rich-tooltip
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerRichTooltipGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerRichTooltipGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - set-avatar
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetAvatarPostForm(file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerSetAvatarPostForm(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - set-github
         * @param {string} github 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetGithubPostForm(github: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerSetGithubPostForm(github, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - set-in-garden
         * @param {boolean} inGarden 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetInGardenPostForm(inGarden: boolean, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerSetInGardenPostForm(inGarden, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - set-language
         * @param {string} language 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetLanguagePut(language: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerSetLanguagePut(language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - set-show-ai-lines
         * @param {boolean} showAiLines 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetShowAiLinesPut(showAiLines: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerSetShowAiLinesPut(showAiLines, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - set-title
         * @param {number} icon 
         * @param {number} noun 
         * @param {number} gender 
         * @param {number} adjective 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetTitlePut(icon: number, noun: number, gender: number, adjective: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerSetTitlePut(icon, noun, gender, adjective, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - set-website
         * @param {string} website 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetWebsitePostForm(website: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerSetWebsitePostForm(website, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary farmer - unregister-tournament
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerUnregisterTournamentPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FarmerApiAxiosParamCreator(configuration).farmerUnregisterTournamentPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FarmerApi - factory interface
 * @export
 */
export const FarmerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary farmer - change-country
         * @param {string} countryCode 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerChangeCountryPostForm(countryCode: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerChangeCountryPostForm(countryCode, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - contributors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerContributorsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerContributorsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - get-connected
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerGetConnectedGet(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerGetConnectedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - get-from-token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerGetFromTokenGet(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerGetFromTokenGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - get
         * @param {number} farmerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerGetGet(farmerId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerGetGet(farmerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - login-token
         * @param {string} login 
         * @param {string} password 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerLoginTokenPostForm(login: string, password: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerLoginTokenPostForm(login, password, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - register-tournament
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerRegisterTournamentPost(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerRegisterTournamentPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - rename-crystals
         * @param {string} name 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerRenameCrystalsPostForm(name: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerRenameCrystalsPostForm(name, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - rename-habs
         * @param {string} name 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerRenameHabsPostForm(name: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerRenameHabsPostForm(name, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - rich-tooltip
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerRichTooltipGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerRichTooltipGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - set-avatar
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetAvatarPostForm(file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerSetAvatarPostForm(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - set-github
         * @param {string} github 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetGithubPostForm(github: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerSetGithubPostForm(github, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - set-in-garden
         * @param {boolean} inGarden 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetInGardenPostForm(inGarden: boolean, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerSetInGardenPostForm(inGarden, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - set-language
         * @param {string} language 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetLanguagePut(language: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerSetLanguagePut(language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - set-show-ai-lines
         * @param {boolean} showAiLines 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetShowAiLinesPut(showAiLines: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerSetShowAiLinesPut(showAiLines, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - set-title
         * @param {number} icon 
         * @param {number} noun 
         * @param {number} gender 
         * @param {number} adjective 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetTitlePut(icon: number, noun: number, gender: number, adjective: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerSetTitlePut(icon, noun, gender, adjective, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - set-website
         * @param {string} website 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerSetWebsitePostForm(website: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerSetWebsitePostForm(website, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary farmer - unregister-tournament
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerUnregisterTournamentPost(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FarmerApiFp(configuration).farmerUnregisterTournamentPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FarmerApi - object-oriented interface
 * @export
 * @class FarmerApi
 * @extends {BaseAPI}
 */
export class FarmerApi extends BaseAPI {
    /**
     * 
     * @summary farmer - change-country
     * @param {string} countryCode 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerChangeCountryPostForm(countryCode: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerChangeCountryPostForm(countryCode, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - contributors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerContributorsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerContributorsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - get-connected
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerGetConnectedGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerGetConnectedGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - get-from-token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerGetFromTokenGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerGetFromTokenGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - get
     * @param {number} farmerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerGetGet(farmerId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerGetGet(farmerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - login-token
     * @param {string} login 
     * @param {string} password 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerLoginTokenPostForm(login: string, password: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerLoginTokenPostForm(login, password, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - register-tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerRegisterTournamentPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerRegisterTournamentPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - rename-crystals
     * @param {string} name 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerRenameCrystalsPostForm(name: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerRenameCrystalsPostForm(name, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - rename-habs
     * @param {string} name 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerRenameHabsPostForm(name: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerRenameHabsPostForm(name, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - rich-tooltip
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerRichTooltipGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerRichTooltipGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - set-avatar
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerSetAvatarPostForm(file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerSetAvatarPostForm(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - set-github
     * @param {string} github 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerSetGithubPostForm(github: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerSetGithubPostForm(github, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - set-in-garden
     * @param {boolean} inGarden 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerSetInGardenPostForm(inGarden: boolean, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerSetInGardenPostForm(inGarden, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - set-language
     * @param {string} language 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerSetLanguagePut(language: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerSetLanguagePut(language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - set-show-ai-lines
     * @param {boolean} showAiLines 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerSetShowAiLinesPut(showAiLines: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerSetShowAiLinesPut(showAiLines, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - set-title
     * @param {number} icon 
     * @param {number} noun 
     * @param {number} gender 
     * @param {number} adjective 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerSetTitlePut(icon: number, noun: number, gender: number, adjective: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerSetTitlePut(icon, noun, gender, adjective, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - set-website
     * @param {string} website 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerSetWebsitePostForm(website: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerSetWebsitePostForm(website, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary farmer - unregister-tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerApi
     */
    public async farmerUnregisterTournamentPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FarmerApiFp(this.configuration).farmerUnregisterTournamentPost(options).then((request) => request(this.axios, this.basePath));
    }
}
