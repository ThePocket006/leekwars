/* tslint:disable */
/* eslint-disable */
/**
 * Leekwars API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import type {AxiosResponse, AxiosInstance, AxiosRequestConfig} from "axios";
import globalAxios from "axios";
import { Configuration } from '@/common/api';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * RankingApi - axios parameter creator
 * @export
 */
export const RankingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ranking - fun
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingFunGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ranking/fun`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ranking - get-active
         * @param {string} category 
         * @param {string} order 
         * @param {number} page 
         * @param {string} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingGetActiveGet: async (category: string, order: string, page: number, country: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling rankingGetActiveGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling rankingGetActiveGet.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling rankingGetActiveGet.');
            }
            // verify required parameter 'country' is not null or undefined
            if (country === null || country === undefined) {
                throw new RequiredError('country','Required parameter country was null or undefined when calling rankingGetActiveGet.');
            }
            const localVarPath = `/ranking/get-active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ranking - get-farmer-rank-active
         * @param {number} farmerId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingGetFarmerRankActiveGet: async (farmerId: number, order: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'farmerId' is not null or undefined
            if (farmerId === null || farmerId === undefined) {
                throw new RequiredError('farmerId','Required parameter farmerId was null or undefined when calling rankingGetFarmerRankActiveGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling rankingGetFarmerRankActiveGet.');
            }
            const localVarPath = `/ranking/get-farmer-rank-active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (farmerId !== undefined) {
                localVarQueryParameter['farmer_id'] = farmerId;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ranking - get-farmer-rank
         * @param {number} farmerId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingGetFarmerRankGet: async (farmerId: number, order: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'farmerId' is not null or undefined
            if (farmerId === null || farmerId === undefined) {
                throw new RequiredError('farmerId','Required parameter farmerId was null or undefined when calling rankingGetFarmerRankGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling rankingGetFarmerRankGet.');
            }
            const localVarPath = `/ranking/get-farmer-rank`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (farmerId !== undefined) {
                localVarQueryParameter['farmer_id'] = farmerId;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ranking - get
         * @param {string} category 
         * @param {string} order 
         * @param {number} page 
         * @param {string} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingGetGet: async (category: string, order: string, page: number, country: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling rankingGetGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling rankingGetGet.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling rankingGetGet.');
            }
            // verify required parameter 'country' is not null or undefined
            if (country === null || country === undefined) {
                throw new RequiredError('country','Required parameter country was null or undefined when calling rankingGetGet.');
            }
            const localVarPath = `/ranking/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ranking - get-home-ranking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingGetHomeRankingGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ranking/get-home-ranking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ranking - get-leek-rank-active
         * @param {number} leekId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingGetLeekRankActiveGet: async (leekId: number, order: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leekId' is not null or undefined
            if (leekId === null || leekId === undefined) {
                throw new RequiredError('leekId','Required parameter leekId was null or undefined when calling rankingGetLeekRankActiveGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling rankingGetLeekRankActiveGet.');
            }
            const localVarPath = `/ranking/get-leek-rank-active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (leekId !== undefined) {
                localVarQueryParameter['leek_id'] = leekId;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ranking - get-leek-rank
         * @param {number} leekId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingGetLeekRankGet: async (leekId: number, order: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leekId' is not null or undefined
            if (leekId === null || leekId === undefined) {
                throw new RequiredError('leekId','Required parameter leekId was null or undefined when calling rankingGetLeekRankGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling rankingGetLeekRankGet.');
            }
            const localVarPath = `/ranking/get-leek-rank`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (leekId !== undefined) {
                localVarQueryParameter['leek_id'] = leekId;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ranking - get-team-rank-active
         * @param {number} teamId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingGetTeamRankActiveGet: async (teamId: number, order: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling rankingGetTeamRankActiveGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling rankingGetTeamRankActiveGet.');
            }
            const localVarPath = `/ranking/get-team-rank-active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ranking - get-team-rank
         * @param {number} teamId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingGetTeamRankGet: async (teamId: number, order: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling rankingGetTeamRankGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling rankingGetTeamRankGet.');
            }
            const localVarPath = `/ranking/get-team-rank`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ranking - search
         * @param {string} _query 
         * @param {boolean} searchLeeks 
         * @param {boolean} searchFarmers 
         * @param {boolean} searchTeams 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingSearchPost: async (_query: string, searchLeeks: boolean, searchFarmers: boolean, searchTeams: boolean, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter '_query' is not null or undefined
            if (_query === null || _query === undefined) {
                throw new RequiredError('_query','Required parameter _query was null or undefined when calling rankingSearchPost.');
            }
            // verify required parameter 'searchLeeks' is not null or undefined
            if (searchLeeks === null || searchLeeks === undefined) {
                throw new RequiredError('searchLeeks','Required parameter searchLeeks was null or undefined when calling rankingSearchPost.');
            }
            // verify required parameter 'searchFarmers' is not null or undefined
            if (searchFarmers === null || searchFarmers === undefined) {
                throw new RequiredError('searchFarmers','Required parameter searchFarmers was null or undefined when calling rankingSearchPost.');
            }
            // verify required parameter 'searchTeams' is not null or undefined
            if (searchTeams === null || searchTeams === undefined) {
                throw new RequiredError('searchTeams','Required parameter searchTeams was null or undefined when calling rankingSearchPost.');
            }
            const localVarPath = `/ranking/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (_query !== undefined) {
                localVarQueryParameter['query'] = _query;
            }

            if (searchLeeks !== undefined) {
                localVarQueryParameter['search_leeks'] = searchLeeks;
            }

            if (searchFarmers !== undefined) {
                localVarQueryParameter['search_farmers'] = searchFarmers;
            }

            if (searchTeams !== undefined) {
                localVarQueryParameter['search_teams'] = searchTeams;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RankingApi - functional programming interface
 * @export
 */
export const RankingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ranking - fun
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingFunGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RankingApiAxiosParamCreator(configuration).rankingFunGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ranking - get-active
         * @param {string} category 
         * @param {string} order 
         * @param {number} page 
         * @param {string} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetActiveGet(category: string, order: string, page: number, country: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RankingApiAxiosParamCreator(configuration).rankingGetActiveGet(category, order, page, country, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ranking - get-farmer-rank-active
         * @param {number} farmerId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetFarmerRankActiveGet(farmerId: number, order: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RankingApiAxiosParamCreator(configuration).rankingGetFarmerRankActiveGet(farmerId, order, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ranking - get-farmer-rank
         * @param {number} farmerId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetFarmerRankGet(farmerId: number, order: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RankingApiAxiosParamCreator(configuration).rankingGetFarmerRankGet(farmerId, order, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ranking - get
         * @param {string} category 
         * @param {string} order 
         * @param {number} page 
         * @param {string} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetGet(category: string, order: string, page: number, country: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RankingApiAxiosParamCreator(configuration).rankingGetGet(category, order, page, country, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ranking - get-home-ranking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetHomeRankingGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RankingApiAxiosParamCreator(configuration).rankingGetHomeRankingGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ranking - get-leek-rank-active
         * @param {number} leekId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetLeekRankActiveGet(leekId: number, order: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RankingApiAxiosParamCreator(configuration).rankingGetLeekRankActiveGet(leekId, order, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ranking - get-leek-rank
         * @param {number} leekId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetLeekRankGet(leekId: number, order: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RankingApiAxiosParamCreator(configuration).rankingGetLeekRankGet(leekId, order, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ranking - get-team-rank-active
         * @param {number} teamId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetTeamRankActiveGet(teamId: number, order: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RankingApiAxiosParamCreator(configuration).rankingGetTeamRankActiveGet(teamId, order, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ranking - get-team-rank
         * @param {number} teamId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetTeamRankGet(teamId: number, order: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RankingApiAxiosParamCreator(configuration).rankingGetTeamRankGet(teamId, order, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ranking - search
         * @param {string} _query 
         * @param {boolean} searchLeeks 
         * @param {boolean} searchFarmers 
         * @param {boolean} searchTeams 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingSearchPost(_query: string, searchLeeks: boolean, searchFarmers: boolean, searchTeams: boolean, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RankingApiAxiosParamCreator(configuration).rankingSearchPost(_query, searchLeeks, searchFarmers, searchTeams, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RankingApi - factory interface
 * @export
 */
export const RankingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary ranking - fun
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingFunGet(options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RankingApiFp(configuration).rankingFunGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ranking - get-active
         * @param {string} category 
         * @param {string} order 
         * @param {number} page 
         * @param {string} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetActiveGet(category: string, order: string, page: number, country: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RankingApiFp(configuration).rankingGetActiveGet(category, order, page, country, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ranking - get-farmer-rank-active
         * @param {number} farmerId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetFarmerRankActiveGet(farmerId: number, order: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RankingApiFp(configuration).rankingGetFarmerRankActiveGet(farmerId, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ranking - get-farmer-rank
         * @param {number} farmerId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetFarmerRankGet(farmerId: number, order: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RankingApiFp(configuration).rankingGetFarmerRankGet(farmerId, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ranking - get
         * @param {string} category 
         * @param {string} order 
         * @param {number} page 
         * @param {string} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetGet(category: string, order: string, page: number, country: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RankingApiFp(configuration).rankingGetGet(category, order, page, country, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ranking - get-home-ranking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetHomeRankingGet(options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RankingApiFp(configuration).rankingGetHomeRankingGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ranking - get-leek-rank-active
         * @param {number} leekId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetLeekRankActiveGet(leekId: number, order: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RankingApiFp(configuration).rankingGetLeekRankActiveGet(leekId, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ranking - get-leek-rank
         * @param {number} leekId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetLeekRankGet(leekId: number, order: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RankingApiFp(configuration).rankingGetLeekRankGet(leekId, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ranking - get-team-rank-active
         * @param {number} teamId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetTeamRankActiveGet(teamId: number, order: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RankingApiFp(configuration).rankingGetTeamRankActiveGet(teamId, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ranking - get-team-rank
         * @param {number} teamId 
         * @param {string} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGetTeamRankGet(teamId: number, order: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RankingApiFp(configuration).rankingGetTeamRankGet(teamId, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ranking - search
         * @param {string} _query 
         * @param {boolean} searchLeeks 
         * @param {boolean} searchFarmers 
         * @param {boolean} searchTeams 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingSearchPost(_query: string, searchLeeks: boolean, searchFarmers: boolean, searchTeams: boolean, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RankingApiFp(configuration).rankingSearchPost(_query, searchLeeks, searchFarmers, searchTeams, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RankingApi - object-oriented interface
 * @export
 * @class RankingApi
 * @extends {BaseAPI}
 */
export class RankingApi extends BaseAPI {
    /**
     * 
     * @summary ranking - fun
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public async rankingFunGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RankingApiFp(this.configuration).rankingFunGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ranking - get-active
     * @param {string} category 
     * @param {string} order 
     * @param {number} page 
     * @param {string} country 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public async rankingGetActiveGet(category: string, order: string, page: number, country: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RankingApiFp(this.configuration).rankingGetActiveGet(category, order, page, country, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ranking - get-farmer-rank-active
     * @param {number} farmerId 
     * @param {string} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public async rankingGetFarmerRankActiveGet(farmerId: number, order: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RankingApiFp(this.configuration).rankingGetFarmerRankActiveGet(farmerId, order, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ranking - get-farmer-rank
     * @param {number} farmerId 
     * @param {string} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public async rankingGetFarmerRankGet(farmerId: number, order: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RankingApiFp(this.configuration).rankingGetFarmerRankGet(farmerId, order, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ranking - get
     * @param {string} category 
     * @param {string} order 
     * @param {number} page 
     * @param {string} country 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public async rankingGetGet(category: string, order: string, page: number, country: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RankingApiFp(this.configuration).rankingGetGet(category, order, page, country, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ranking - get-home-ranking
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public async rankingGetHomeRankingGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RankingApiFp(this.configuration).rankingGetHomeRankingGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ranking - get-leek-rank-active
     * @param {number} leekId 
     * @param {string} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public async rankingGetLeekRankActiveGet(leekId: number, order: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RankingApiFp(this.configuration).rankingGetLeekRankActiveGet(leekId, order, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ranking - get-leek-rank
     * @param {number} leekId 
     * @param {string} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public async rankingGetLeekRankGet(leekId: number, order: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RankingApiFp(this.configuration).rankingGetLeekRankGet(leekId, order, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ranking - get-team-rank-active
     * @param {number} teamId 
     * @param {string} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public async rankingGetTeamRankActiveGet(teamId: number, order: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RankingApiFp(this.configuration).rankingGetTeamRankActiveGet(teamId, order, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ranking - get-team-rank
     * @param {number} teamId 
     * @param {string} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public async rankingGetTeamRankGet(teamId: number, order: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RankingApiFp(this.configuration).rankingGetTeamRankGet(teamId, order, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ranking - search
     * @param {string} _query 
     * @param {boolean} searchLeeks 
     * @param {boolean} searchFarmers 
     * @param {boolean} searchTeams 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public async rankingSearchPost(_query: string, searchLeeks: boolean, searchFarmers: boolean, searchTeams: boolean, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RankingApiFp(this.configuration).rankingSearchPost(_query, searchLeeks, searchFarmers, searchTeams, body, options).then((request) => request(this.axios, this.basePath));
    }
}
