/* tslint:disable */
/* eslint-disable */
/**
 * Leekwars API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import type {AxiosResponse, AxiosInstance, AxiosRequestConfig} from "axios";
import globalAxios from "axios";
import { Configuration } from '@/common/api';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * EncyclopediaApi - axios parameter creator
 * @export
 */
export const EncyclopediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary encyclopedia - end-edition
         * @param {number} pageId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encyclopediaEndEditionPost: async (pageId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling encyclopediaEndEditionPost.');
            }
            const localVarPath = `/encyclopedia/end-edition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pageId !== undefined) {
                localVarQueryParameter['page_id'] = pageId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary encyclopedia - get-all-locale
         * @param {string} locale 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encyclopediaGetAllLocaleGet: async (locale: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locale' is not null or undefined
            if (locale === null || locale === undefined) {
                throw new RequiredError('locale','Required parameter locale was null or undefined when calling encyclopediaGetAllLocaleGet.');
            }
            const localVarPath = `/encyclopedia/get-all-locale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary encyclopedia - get
         * @param {string} language 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encyclopediaGetGet: async (language: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling encyclopediaGetGet.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling encyclopediaGetGet.');
            }
            const localVarPath = `/encyclopedia/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary encyclopedia - get-last-pages
         * @param {string} language 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encyclopediaGetLastPagesGet: async (language: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling encyclopediaGetLastPagesGet.');
            }
            const localVarPath = `/encyclopedia/get-last-pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary encyclopedia - get-locked-pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encyclopediaGetLockedPagesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/encyclopedia/get-locked-pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary encyclopedia - search
         * @param {string} language 
         * @param {string} _query 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encyclopediaSearchGet: async (language: string, _query: string, page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling encyclopediaSearchGet.');
            }
            // verify required parameter '_query' is not null or undefined
            if (_query === null || _query === undefined) {
                throw new RequiredError('_query','Required parameter _query was null or undefined when calling encyclopediaSearchGet.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling encyclopediaSearchGet.');
            }
            const localVarPath = `/encyclopedia/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (_query !== undefined) {
                localVarQueryParameter['query'] = _query;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary encyclopedia - set-language
         * @param {number} pageId 
         * @param {string} language 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encyclopediaSetLanguagePost: async (pageId: number, language: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling encyclopediaSetLanguagePost.');
            }
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling encyclopediaSetLanguagePost.');
            }
            const localVarPath = `/encyclopedia/set-language`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pageId !== undefined) {
                localVarQueryParameter['page_id'] = pageId;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary encyclopedia - start-edition
         * @param {number} pageId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encyclopediaStartEditionPost: async (pageId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling encyclopediaStartEditionPost.');
            }
            const localVarPath = `/encyclopedia/start-edition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pageId !== undefined) {
                localVarQueryParameter['page_id'] = pageId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary encyclopedia - update
         * @param {number} pageId 
         * @param {string} language 
         * @param {string} title 
         * @param {string} content 
         * @param {number} parent 
         * @param {number} reference 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encyclopediaUpdatePut: async (pageId: number, language: string, title: string, content: string, parent: number, reference: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling encyclopediaUpdatePut.');
            }
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling encyclopediaUpdatePut.');
            }
            // verify required parameter 'title' is not null or undefined
            if (title === null || title === undefined) {
                throw new RequiredError('title','Required parameter title was null or undefined when calling encyclopediaUpdatePut.');
            }
            // verify required parameter 'content' is not null or undefined
            if (content === null || content === undefined) {
                throw new RequiredError('content','Required parameter content was null or undefined when calling encyclopediaUpdatePut.');
            }
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling encyclopediaUpdatePut.');
            }
            // verify required parameter 'reference' is not null or undefined
            if (reference === null || reference === undefined) {
                throw new RequiredError('reference','Required parameter reference was null or undefined when calling encyclopediaUpdatePut.');
            }
            const localVarPath = `/encyclopedia/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pageId !== undefined) {
                localVarQueryParameter['page_id'] = pageId;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (content !== undefined) {
                localVarQueryParameter['content'] = content;
            }

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (reference !== undefined) {
                localVarQueryParameter['reference'] = reference;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EncyclopediaApi - functional programming interface
 * @export
 */
export const EncyclopediaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary encyclopedia - end-edition
         * @param {number} pageId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaEndEditionPost(pageId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EncyclopediaApiAxiosParamCreator(configuration).encyclopediaEndEditionPost(pageId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary encyclopedia - get-all-locale
         * @param {string} locale 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaGetAllLocaleGet(locale: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EncyclopediaApiAxiosParamCreator(configuration).encyclopediaGetAllLocaleGet(locale, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary encyclopedia - get
         * @param {string} language 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaGetGet(language: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EncyclopediaApiAxiosParamCreator(configuration).encyclopediaGetGet(language, code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary encyclopedia - get-last-pages
         * @param {string} language 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaGetLastPagesGet(language: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EncyclopediaApiAxiosParamCreator(configuration).encyclopediaGetLastPagesGet(language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary encyclopedia - get-locked-pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaGetLockedPagesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EncyclopediaApiAxiosParamCreator(configuration).encyclopediaGetLockedPagesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary encyclopedia - search
         * @param {string} language 
         * @param {string} _query 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaSearchGet(language: string, _query: string, page: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EncyclopediaApiAxiosParamCreator(configuration).encyclopediaSearchGet(language, _query, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary encyclopedia - set-language
         * @param {number} pageId 
         * @param {string} language 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaSetLanguagePost(pageId: number, language: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EncyclopediaApiAxiosParamCreator(configuration).encyclopediaSetLanguagePost(pageId, language, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary encyclopedia - start-edition
         * @param {number} pageId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaStartEditionPost(pageId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EncyclopediaApiAxiosParamCreator(configuration).encyclopediaStartEditionPost(pageId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary encyclopedia - update
         * @param {number} pageId 
         * @param {string} language 
         * @param {string} title 
         * @param {string} content 
         * @param {number} parent 
         * @param {number} reference 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaUpdatePut(pageId: number, language: string, title: string, content: string, parent: number, reference: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EncyclopediaApiAxiosParamCreator(configuration).encyclopediaUpdatePut(pageId, language, title, content, parent, reference, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EncyclopediaApi - factory interface
 * @export
 */
export const EncyclopediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary encyclopedia - end-edition
         * @param {number} pageId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaEndEditionPost(pageId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EncyclopediaApiFp(configuration).encyclopediaEndEditionPost(pageId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary encyclopedia - get-all-locale
         * @param {string} locale 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaGetAllLocaleGet(locale: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EncyclopediaApiFp(configuration).encyclopediaGetAllLocaleGet(locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary encyclopedia - get
         * @param {string} language 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaGetGet(language: string, code: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EncyclopediaApiFp(configuration).encyclopediaGetGet(language, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary encyclopedia - get-last-pages
         * @param {string} language 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaGetLastPagesGet(language: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EncyclopediaApiFp(configuration).encyclopediaGetLastPagesGet(language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary encyclopedia - get-locked-pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaGetLockedPagesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EncyclopediaApiFp(configuration).encyclopediaGetLockedPagesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary encyclopedia - search
         * @param {string} language 
         * @param {string} _query 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaSearchGet(language: string, _query: string, page: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EncyclopediaApiFp(configuration).encyclopediaSearchGet(language, _query, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary encyclopedia - set-language
         * @param {number} pageId 
         * @param {string} language 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaSetLanguagePost(pageId: number, language: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EncyclopediaApiFp(configuration).encyclopediaSetLanguagePost(pageId, language, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary encyclopedia - start-edition
         * @param {number} pageId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaStartEditionPost(pageId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EncyclopediaApiFp(configuration).encyclopediaStartEditionPost(pageId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary encyclopedia - update
         * @param {number} pageId 
         * @param {string} language 
         * @param {string} title 
         * @param {string} content 
         * @param {number} parent 
         * @param {number} reference 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encyclopediaUpdatePut(pageId: number, language: string, title: string, content: string, parent: number, reference: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EncyclopediaApiFp(configuration).encyclopediaUpdatePut(pageId, language, title, content, parent, reference, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EncyclopediaApi - object-oriented interface
 * @export
 * @class EncyclopediaApi
 * @extends {BaseAPI}
 */
export class EncyclopediaApi extends BaseAPI {
    /**
     * 
     * @summary encyclopedia - end-edition
     * @param {number} pageId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncyclopediaApi
     */
    public async encyclopediaEndEditionPost(pageId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EncyclopediaApiFp(this.configuration).encyclopediaEndEditionPost(pageId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary encyclopedia - get-all-locale
     * @param {string} locale 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncyclopediaApi
     */
    public async encyclopediaGetAllLocaleGet(locale: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EncyclopediaApiFp(this.configuration).encyclopediaGetAllLocaleGet(locale, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary encyclopedia - get
     * @param {string} language 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncyclopediaApi
     */
    public async encyclopediaGetGet(language: string, code: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EncyclopediaApiFp(this.configuration).encyclopediaGetGet(language, code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary encyclopedia - get-last-pages
     * @param {string} language 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncyclopediaApi
     */
    public async encyclopediaGetLastPagesGet(language: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EncyclopediaApiFp(this.configuration).encyclopediaGetLastPagesGet(language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary encyclopedia - get-locked-pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncyclopediaApi
     */
    public async encyclopediaGetLockedPagesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EncyclopediaApiFp(this.configuration).encyclopediaGetLockedPagesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary encyclopedia - search
     * @param {string} language 
     * @param {string} _query 
     * @param {number} page 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncyclopediaApi
     */
    public async encyclopediaSearchGet(language: string, _query: string, page: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EncyclopediaApiFp(this.configuration).encyclopediaSearchGet(language, _query, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary encyclopedia - set-language
     * @param {number} pageId 
     * @param {string} language 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncyclopediaApi
     */
    public async encyclopediaSetLanguagePost(pageId: number, language: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EncyclopediaApiFp(this.configuration).encyclopediaSetLanguagePost(pageId, language, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary encyclopedia - start-edition
     * @param {number} pageId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncyclopediaApi
     */
    public async encyclopediaStartEditionPost(pageId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EncyclopediaApiFp(this.configuration).encyclopediaStartEditionPost(pageId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary encyclopedia - update
     * @param {number} pageId 
     * @param {string} language 
     * @param {string} title 
     * @param {string} content 
     * @param {number} parent 
     * @param {number} reference 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncyclopediaApi
     */
    public async encyclopediaUpdatePut(pageId: number, language: string, title: string, content: string, parent: number, reference: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EncyclopediaApiFp(this.configuration).encyclopediaUpdatePut(pageId, language, title, content, parent, reference, options).then((request) => request(this.axios, this.basePath));
    }
}
