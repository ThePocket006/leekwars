/* tslint:disable */
/* eslint-disable */
/**
 * Leekwars API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import type {AxiosInstance, AxiosRequestConfig, AxiosResponse} from "axios";
import globalAxios from "axios";
import { Configuration } from '@/common/api';
import type {RequestArgs} from "@/common/api/base";
import {BASE_PATH, BaseAPI, RequiredError} from "@/common/api/base";
/**
 * FightApi - axios parameter creator
 * @export
 */
export const FightApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary fight - comment
         * @param {number} fightId 
         * @param {string} comment 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fightCommentPostForm: async (fightId: number, comment: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fightId' is not null or undefined
            if (fightId === null || fightId === undefined) {
                throw new RequiredError('fightId','Required parameter fightId was null or undefined when calling fightCommentPostForm.');
            }
            // verify required parameter 'comment' is not null or undefined
            if (comment === null || comment === undefined) {
                throw new RequiredError('comment','Required parameter comment was null or undefined when calling fightCommentPostForm.');
            }
            const localVarPath = `/fight/comment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (fightId !== undefined) {
                localVarQueryParameter['fight_id'] = fightId;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary fight - fullmoon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fightFullmoonGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fight/fullmoon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary fight - get
         * @param {number} fightId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fightGetGet: async (fightId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fightId' is not null or undefined
            if (fightId === null || fightId === undefined) {
                throw new RequiredError('fightId','Required parameter fightId was null or undefined when calling fightGetGet.');
            }
            const localVarPath = `/fight/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (fightId !== undefined) {
                localVarQueryParameter['fight_id'] = fightId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary fight - get-logs
         * @param {number} fightId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fightGetLogsGet: async (fightId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fightId' is not null or undefined
            if (fightId === null || fightId === undefined) {
                throw new RequiredError('fightId','Required parameter fightId was null or undefined when calling fightGetLogsGet.');
            }
            const localVarPath = `/fight/get-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (fightId !== undefined) {
                localVarQueryParameter['fight_id'] = fightId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FightApi - functional programming interface
 * @export
 */
export const FightApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary fight - comment
         * @param {number} fightId 
         * @param {string} comment 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fightCommentPostForm(fightId: number, comment: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FightApiAxiosParamCreator(configuration).fightCommentPostForm(fightId, comment, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary fight - fullmoon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fightFullmoonGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FightApiAxiosParamCreator(configuration).fightFullmoonGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary fight - get
         * @param {number} fightId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fightGetGet(fightId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FightApiAxiosParamCreator(configuration).fightGetGet(fightId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary fight - get-logs
         * @param {number} fightId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fightGetLogsGet(fightId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FightApiAxiosParamCreator(configuration).fightGetLogsGet(fightId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FightApi - factory interface
 * @export
 */
export const FightApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary fight - comment
         * @param {number} fightId 
         * @param {string} comment 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fightCommentPostForm(fightId: number, comment: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FightApiFp(configuration).fightCommentPostForm(fightId, comment, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary fight - fullmoon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fightFullmoonGet(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FightApiFp(configuration).fightFullmoonGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary fight - get
         * @param {number} fightId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fightGetGet(fightId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FightApiFp(configuration).fightGetGet(fightId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary fight - get-logs
         * @param {number} fightId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fightGetLogsGet(fightId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FightApiFp(configuration).fightGetLogsGet(fightId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FightApi - object-oriented interface
 * @export
 * @class FightApi
 * @extends {BaseAPI}
 */
export class FightApi extends BaseAPI {
    /**
     * 
     * @summary fight - comment
     * @param {number} fightId 
     * @param {string} comment 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FightApi
     */
    public async fightCommentPostForm(fightId: number, comment: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FightApiFp(this.configuration).fightCommentPostForm(fightId, comment, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary fight - fullmoon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FightApi
     */
    public async fightFullmoonGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FightApiFp(this.configuration).fightFullmoonGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary fight - get
     * @param {number} fightId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FightApi
     */
    public async fightGetGet(fightId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FightApiFp(this.configuration).fightGetGet(fightId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary fight - get-logs
     * @param {number} fightId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FightApi
     */
    public async fightGetLogsGet(fightId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FightApiFp(this.configuration).fightGetLogsGet(fightId, options).then((request) => request(this.axios, this.basePath));
    }
}
