/* tslint:disable */
/* eslint-disable */
/**
 * Leekwars API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import type {AxiosResponse, AxiosInstance, AxiosRequestConfig} from "axios";
import globalAxios from "axios";
import { Configuration } from '@/common/api';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * GroupeApi - axios parameter creator
 * @export
 */
export const GroupeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary groupe - apply-equipment
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeApplyEquipmentPost: async (groupId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeApplyEquipmentPost.');
            }
            const localVarPath = `/groupe/apply-equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - create-member
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeCreateMemberPost: async (groupId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeCreateMemberPost.');
            }
            const localVarPath = `/groupe/create-member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - equipment
         * @param {number} groupId 
         * @param {number} level 
         * @param {string} characteristics 
         * @param {Array<any>} weapons 
         * @param {Array<any>} chips 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeEquipmentPut: async (groupId: number, level: number, characteristics: string, weapons: Array<any>, chips: Array<any>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeEquipmentPut.');
            }
            // verify required parameter 'level' is not null or undefined
            if (level === null || level === undefined) {
                throw new RequiredError('level','Required parameter level was null or undefined when calling groupeEquipmentPut.');
            }
            // verify required parameter 'characteristics' is not null or undefined
            if (characteristics === null || characteristics === undefined) {
                throw new RequiredError('characteristics','Required parameter characteristics was null or undefined when calling groupeEquipmentPut.');
            }
            // verify required parameter 'weapons' is not null or undefined
            if (weapons === null || weapons === undefined) {
                throw new RequiredError('weapons','Required parameter weapons was null or undefined when calling groupeEquipmentPut.');
            }
            // verify required parameter 'chips' is not null or undefined
            if (chips === null || chips === undefined) {
                throw new RequiredError('chips','Required parameter chips was null or undefined when calling groupeEquipmentPut.');
            }
            const localVarPath = `/groupe/equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (characteristics !== undefined) {
                localVarQueryParameter['characteristics'] = characteristics;
            }

            if (weapons) {
                localVarQueryParameter['weapons'] = weapons;
            }

            if (chips) {
                localVarQueryParameter['chips'] = chips;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - get
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeGetGet: async (groupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeGetGet.');
            }
            const localVarPath = `/groupe/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - give-item
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {number} itemId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeGiveItemPost: async (groupId: number, memberId: number, itemId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeGiveItemPost.');
            }
            // verify required parameter 'memberId' is not null or undefined
            if (memberId === null || memberId === undefined) {
                throw new RequiredError('memberId','Required parameter memberId was null or undefined when calling groupeGiveItemPost.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling groupeGiveItemPost.');
            }
            const localVarPath = `/groupe/give-item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['member_id'] = memberId;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - member-email
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeMemberEmailPut: async (groupId: number, memberId: number, email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeMemberEmailPut.');
            }
            // verify required parameter 'memberId' is not null or undefined
            if (memberId === null || memberId === undefined) {
                throw new RequiredError('memberId','Required parameter memberId was null or undefined when calling groupeMemberEmailPut.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling groupeMemberEmailPut.');
            }
            const localVarPath = `/groupe/member-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['member_id'] = memberId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - member-leek-name
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} leekName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeMemberLeekNamePut: async (groupId: number, memberId: number, leekName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeMemberLeekNamePut.');
            }
            // verify required parameter 'memberId' is not null or undefined
            if (memberId === null || memberId === undefined) {
                throw new RequiredError('memberId','Required parameter memberId was null or undefined when calling groupeMemberLeekNamePut.');
            }
            // verify required parameter 'leekName' is not null or undefined
            if (leekName === null || leekName === undefined) {
                throw new RequiredError('leekName','Required parameter leekName was null or undefined when calling groupeMemberLeekNamePut.');
            }
            const localVarPath = `/groupe/member-leek-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['member_id'] = memberId;
            }

            if (leekName !== undefined) {
                localVarQueryParameter['leek_name'] = leekName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - member-name
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeMemberNamePut: async (groupId: number, memberId: number, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeMemberNamePut.');
            }
            // verify required parameter 'memberId' is not null or undefined
            if (memberId === null || memberId === undefined) {
                throw new RequiredError('memberId','Required parameter memberId was null or undefined when calling groupeMemberNamePut.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling groupeMemberNamePut.');
            }
            const localVarPath = `/groupe/member-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['member_id'] = memberId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - member-password
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeMemberPasswordPut: async (groupId: number, memberId: number, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeMemberPasswordPut.');
            }
            // verify required parameter 'memberId' is not null or undefined
            if (memberId === null || memberId === undefined) {
                throw new RequiredError('memberId','Required parameter memberId was null or undefined when calling groupeMemberPasswordPut.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling groupeMemberPasswordPut.');
            }
            const localVarPath = `/groupe/member-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['member_id'] = memberId;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - remove-member
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeRemoveMemberDelete: async (groupId: number, memberId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeRemoveMemberDelete.');
            }
            // verify required parameter 'memberId' is not null or undefined
            if (memberId === null || memberId === undefined) {
                throw new RequiredError('memberId','Required parameter memberId was null or undefined when calling groupeRemoveMemberDelete.');
            }
            const localVarPath = `/groupe/remove-member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['member_id'] = memberId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - send-invite
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeSendInvitePost: async (groupId: number, memberId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeSendInvitePost.');
            }
            // verify required parameter 'memberId' is not null or undefined
            if (memberId === null || memberId === undefined) {
                throw new RequiredError('memberId','Required parameter memberId was null or undefined when calling groupeSendInvitePost.');
            }
            const localVarPath = `/groupe/send-invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['member_id'] = memberId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - setting-bank
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeSettingBankPut: async (groupId: number, enabled: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeSettingBankPut.');
            }
            // verify required parameter 'enabled' is not null or undefined
            if (enabled === null || enabled === undefined) {
                throw new RequiredError('enabled','Required parameter enabled was null or undefined when calling groupeSettingBankPut.');
            }
            const localVarPath = `/groupe/setting-bank`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - setting-br
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeSettingBrPut: async (groupId: number, enabled: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeSettingBrPut.');
            }
            // verify required parameter 'enabled' is not null or undefined
            if (enabled === null || enabled === undefined) {
                throw new RequiredError('enabled','Required parameter enabled was null or undefined when calling groupeSettingBrPut.');
            }
            const localVarPath = `/groupe/setting-br`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - setting-buy-fights
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeSettingBuyFightsPut: async (groupId: number, enabled: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeSettingBuyFightsPut.');
            }
            // verify required parameter 'enabled' is not null or undefined
            if (enabled === null || enabled === undefined) {
                throw new RequiredError('enabled','Required parameter enabled was null or undefined when calling groupeSettingBuyFightsPut.');
            }
            const localVarPath = `/groupe/setting-buy-fights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - setting-chat
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeSettingChatPut: async (groupId: number, enabled: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeSettingChatPut.');
            }
            // verify required parameter 'enabled' is not null or undefined
            if (enabled === null || enabled === undefined) {
                throw new RequiredError('enabled','Required parameter enabled was null or undefined when calling groupeSettingChatPut.');
            }
            const localVarPath = `/groupe/setting-chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - setting-equipment-blocked
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeSettingEquipmentBlockedPut: async (groupId: number, enabled: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeSettingEquipmentBlockedPut.');
            }
            // verify required parameter 'enabled' is not null or undefined
            if (enabled === null || enabled === undefined) {
                throw new RequiredError('enabled','Required parameter enabled was null or undefined when calling groupeSettingEquipmentBlockedPut.');
            }
            const localVarPath = `/groupe/setting-equipment-blocked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - setting-new-leek
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeSettingNewLeekPut: async (groupId: number, enabled: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeSettingNewLeekPut.');
            }
            // verify required parameter 'enabled' is not null or undefined
            if (enabled === null || enabled === undefined) {
                throw new RequiredError('enabled','Required parameter enabled was null or undefined when calling groupeSettingNewLeekPut.');
            }
            const localVarPath = `/groupe/setting-new-leek`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - setting-public-chat
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeSettingPublicChatPut: async (groupId: number, enabled: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeSettingPublicChatPut.');
            }
            // verify required parameter 'enabled' is not null or undefined
            if (enabled === null || enabled === undefined) {
                throw new RequiredError('enabled','Required parameter enabled was null or undefined when calling groupeSettingPublicChatPut.');
            }
            const localVarPath = `/groupe/setting-public-chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - setting-tournaments
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeSettingTournamentsPut: async (groupId: number, enabled: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeSettingTournamentsPut.');
            }
            // verify required parameter 'enabled' is not null or undefined
            if (enabled === null || enabled === undefined) {
                throw new RequiredError('enabled','Required parameter enabled was null or undefined when calling groupeSettingTournamentsPut.');
            }
            const localVarPath = `/groupe/setting-tournaments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - setting-xp-blocked
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeSettingXpBlockedPut: async (groupId: number, enabled: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeSettingXpBlockedPut.');
            }
            // verify required parameter 'enabled' is not null or undefined
            if (enabled === null || enabled === undefined) {
                throw new RequiredError('enabled','Required parameter enabled was null or undefined when calling groupeSettingXpBlockedPut.');
            }
            const localVarPath = `/groupe/setting-xp-blocked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - start-battle-royale
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeStartBattleRoyalePost: async (groupId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeStartBattleRoyalePost.');
            }
            const localVarPath = `/groupe/start-battle-royale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - start-solo-tournament
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeStartSoloTournamentPost: async (groupId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeStartSoloTournamentPost.');
            }
            const localVarPath = `/groupe/start-solo-tournament`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary groupe - start-team-tournament
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupeStartTeamTournamentPost: async (groupId: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupeStartTeamTournamentPost.');
            }
            const localVarPath = `/groupe/start-team-tournament`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupeApi - functional programming interface
 * @export
 */
export const GroupeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary groupe - apply-equipment
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeApplyEquipmentPost(groupId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeApplyEquipmentPost(groupId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - create-member
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeCreateMemberPost(groupId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeCreateMemberPost(groupId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - equipment
         * @param {number} groupId 
         * @param {number} level 
         * @param {string} characteristics 
         * @param {Array<any>} weapons 
         * @param {Array<any>} chips 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeEquipmentPut(groupId: number, level: number, characteristics: string, weapons: Array<any>, chips: Array<any>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeEquipmentPut(groupId, level, characteristics, weapons, chips, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - get
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeGetGet(groupId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeGetGet(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - give-item
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {number} itemId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeGiveItemPost(groupId: number, memberId: number, itemId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeGiveItemPost(groupId, memberId, itemId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - member-email
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeMemberEmailPut(groupId: number, memberId: number, email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeMemberEmailPut(groupId, memberId, email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - member-leek-name
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} leekName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeMemberLeekNamePut(groupId: number, memberId: number, leekName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeMemberLeekNamePut(groupId, memberId, leekName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - member-name
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeMemberNamePut(groupId: number, memberId: number, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeMemberNamePut(groupId, memberId, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - member-password
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeMemberPasswordPut(groupId: number, memberId: number, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeMemberPasswordPut(groupId, memberId, password, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - remove-member
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeRemoveMemberDelete(groupId: number, memberId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeRemoveMemberDelete(groupId, memberId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - send-invite
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSendInvitePost(groupId: number, memberId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeSendInvitePost(groupId, memberId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - setting-bank
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingBankPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeSettingBankPut(groupId, enabled, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - setting-br
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingBrPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeSettingBrPut(groupId, enabled, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - setting-buy-fights
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingBuyFightsPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeSettingBuyFightsPut(groupId, enabled, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - setting-chat
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingChatPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeSettingChatPut(groupId, enabled, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - setting-equipment-blocked
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingEquipmentBlockedPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeSettingEquipmentBlockedPut(groupId, enabled, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - setting-new-leek
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingNewLeekPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeSettingNewLeekPut(groupId, enabled, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - setting-public-chat
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingPublicChatPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeSettingPublicChatPut(groupId, enabled, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - setting-tournaments
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingTournamentsPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeSettingTournamentsPut(groupId, enabled, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - setting-xp-blocked
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingXpBlockedPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeSettingXpBlockedPut(groupId, enabled, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - start-battle-royale
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeStartBattleRoyalePost(groupId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeStartBattleRoyalePost(groupId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - start-solo-tournament
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeStartSoloTournamentPost(groupId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeStartSoloTournamentPost(groupId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary groupe - start-team-tournament
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeStartTeamTournamentPost(groupId: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await GroupeApiAxiosParamCreator(configuration).groupeStartTeamTournamentPost(groupId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupeApi - factory interface
 * @export
 */
export const GroupeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary groupe - apply-equipment
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeApplyEquipmentPost(groupId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeApplyEquipmentPost(groupId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - create-member
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeCreateMemberPost(groupId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeCreateMemberPost(groupId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - equipment
         * @param {number} groupId 
         * @param {number} level 
         * @param {string} characteristics 
         * @param {Array<any>} weapons 
         * @param {Array<any>} chips 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeEquipmentPut(groupId: number, level: number, characteristics: string, weapons: Array<any>, chips: Array<any>, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeEquipmentPut(groupId, level, characteristics, weapons, chips, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - get
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeGetGet(groupId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeGetGet(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - give-item
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {number} itemId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeGiveItemPost(groupId: number, memberId: number, itemId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeGiveItemPost(groupId, memberId, itemId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - member-email
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeMemberEmailPut(groupId: number, memberId: number, email: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeMemberEmailPut(groupId, memberId, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - member-leek-name
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} leekName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeMemberLeekNamePut(groupId: number, memberId: number, leekName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeMemberLeekNamePut(groupId, memberId, leekName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - member-name
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeMemberNamePut(groupId: number, memberId: number, name: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeMemberNamePut(groupId, memberId, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - member-password
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeMemberPasswordPut(groupId: number, memberId: number, password: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeMemberPasswordPut(groupId, memberId, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - remove-member
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeRemoveMemberDelete(groupId: number, memberId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeRemoveMemberDelete(groupId, memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - send-invite
         * @param {number} groupId 
         * @param {number} memberId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSendInvitePost(groupId: number, memberId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeSendInvitePost(groupId, memberId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - setting-bank
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingBankPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeSettingBankPut(groupId, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - setting-br
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingBrPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeSettingBrPut(groupId, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - setting-buy-fights
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingBuyFightsPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeSettingBuyFightsPut(groupId, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - setting-chat
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingChatPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeSettingChatPut(groupId, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - setting-equipment-blocked
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingEquipmentBlockedPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeSettingEquipmentBlockedPut(groupId, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - setting-new-leek
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingNewLeekPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeSettingNewLeekPut(groupId, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - setting-public-chat
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingPublicChatPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeSettingPublicChatPut(groupId, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - setting-tournaments
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingTournamentsPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeSettingTournamentsPut(groupId, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - setting-xp-blocked
         * @param {number} groupId 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeSettingXpBlockedPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeSettingXpBlockedPut(groupId, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - start-battle-royale
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeStartBattleRoyalePost(groupId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeStartBattleRoyalePost(groupId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - start-solo-tournament
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeStartSoloTournamentPost(groupId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return GroupeApiFp(configuration).groupeStartSoloTournamentPost(groupId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary groupe - start-team-tournament
         * @param {number} groupId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupeStartTeamTournamentPost(groupId: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return GroupeApiFp(configuration).groupeStartTeamTournamentPost(groupId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupeApi - object-oriented interface
 * @export
 * @class GroupeApi
 * @extends {BaseAPI}
 */
export class GroupeApi extends BaseAPI {
    /**
     * 
     * @summary groupe - apply-equipment
     * @param {number} groupId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeApplyEquipmentPost(groupId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeApplyEquipmentPost(groupId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - create-member
     * @param {number} groupId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeCreateMemberPost(groupId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeCreateMemberPost(groupId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - equipment
     * @param {number} groupId 
     * @param {number} level 
     * @param {string} characteristics 
     * @param {Array<any>} weapons 
     * @param {Array<any>} chips 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeEquipmentPut(groupId: number, level: number, characteristics: string, weapons: Array<any>, chips: Array<any>, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeEquipmentPut(groupId, level, characteristics, weapons, chips, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - get
     * @param {number} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeGetGet(groupId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeGetGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - give-item
     * @param {number} groupId 
     * @param {number} memberId 
     * @param {number} itemId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeGiveItemPost(groupId: number, memberId: number, itemId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeGiveItemPost(groupId, memberId, itemId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - member-email
     * @param {number} groupId 
     * @param {number} memberId 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeMemberEmailPut(groupId: number, memberId: number, email: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeMemberEmailPut(groupId, memberId, email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - member-leek-name
     * @param {number} groupId 
     * @param {number} memberId 
     * @param {string} leekName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeMemberLeekNamePut(groupId: number, memberId: number, leekName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeMemberLeekNamePut(groupId, memberId, leekName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - member-name
     * @param {number} groupId 
     * @param {number} memberId 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeMemberNamePut(groupId: number, memberId: number, name: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeMemberNamePut(groupId, memberId, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - member-password
     * @param {number} groupId 
     * @param {number} memberId 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeMemberPasswordPut(groupId: number, memberId: number, password: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeMemberPasswordPut(groupId, memberId, password, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - remove-member
     * @param {number} groupId 
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeRemoveMemberDelete(groupId: number, memberId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeRemoveMemberDelete(groupId, memberId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - send-invite
     * @param {number} groupId 
     * @param {number} memberId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeSendInvitePost(groupId: number, memberId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeSendInvitePost(groupId, memberId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - setting-bank
     * @param {number} groupId 
     * @param {boolean} enabled 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeSettingBankPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeSettingBankPut(groupId, enabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - setting-br
     * @param {number} groupId 
     * @param {boolean} enabled 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeSettingBrPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeSettingBrPut(groupId, enabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - setting-buy-fights
     * @param {number} groupId 
     * @param {boolean} enabled 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeSettingBuyFightsPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeSettingBuyFightsPut(groupId, enabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - setting-chat
     * @param {number} groupId 
     * @param {boolean} enabled 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeSettingChatPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeSettingChatPut(groupId, enabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - setting-equipment-blocked
     * @param {number} groupId 
     * @param {boolean} enabled 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeSettingEquipmentBlockedPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeSettingEquipmentBlockedPut(groupId, enabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - setting-new-leek
     * @param {number} groupId 
     * @param {boolean} enabled 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeSettingNewLeekPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeSettingNewLeekPut(groupId, enabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - setting-public-chat
     * @param {number} groupId 
     * @param {boolean} enabled 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeSettingPublicChatPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeSettingPublicChatPut(groupId, enabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - setting-tournaments
     * @param {number} groupId 
     * @param {boolean} enabled 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeSettingTournamentsPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeSettingTournamentsPut(groupId, enabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - setting-xp-blocked
     * @param {number} groupId 
     * @param {boolean} enabled 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeSettingXpBlockedPut(groupId: number, enabled: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeSettingXpBlockedPut(groupId, enabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - start-battle-royale
     * @param {number} groupId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeStartBattleRoyalePost(groupId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeStartBattleRoyalePost(groupId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - start-solo-tournament
     * @param {number} groupId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeStartSoloTournamentPost(groupId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return GroupeApiFp(this.configuration).groupeStartSoloTournamentPost(groupId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary groupe - start-team-tournament
     * @param {number} groupId 
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupeApi
     */
    public async groupeStartTeamTournamentPost(groupId: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return GroupeApiFp(this.configuration).groupeStartTeamTournamentPost(groupId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
