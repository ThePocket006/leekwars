/* tslint:disable */
/* eslint-disable */
/**
 * Leekwars API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import type {AxiosInstance, AxiosRequestConfig, AxiosResponse} from "axios";
import globalAxios from "axios";
import { Configuration } from '@/common/api';
import type {RequestArgs} from "@/common/api/base";
import {BASE_PATH, BaseAPI, RequiredError} from "@/common/api/base";

/**
 * AiApi - axios parameter creator
 * @export
 */
export const AiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ai - bin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiBinDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ai/bin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - change-folder
         * @param {number} aiId 
         * @param {number} folderId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiChangeFolderPostForm: async (aiId: number, folderId: number, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aiId' is not null or undefined
            if (aiId === null || aiId === undefined) {
                throw new RequiredError('aiId','Required parameter aiId was null or undefined when calling aiChangeFolderPostForm.');
            }
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling aiChangeFolderPostForm.');
            }
            const localVarPath = `/ai/change-folder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (aiId !== undefined) {
                localVarQueryParameter['ai_id'] = aiId;
            }

            if (folderId !== undefined) {
                localVarQueryParameter['folder_id'] = folderId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - delete
         * @param {number} aiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiDeleteDelete: async (aiId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aiId' is not null or undefined
            if (aiId === null || aiId === undefined) {
                throw new RequiredError('aiId','Required parameter aiId was null or undefined when calling aiDeleteDelete.');
            }
            const localVarPath = `/ai/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (aiId !== undefined) {
                localVarQueryParameter['ai_id'] = aiId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - destroy
         * @param {number} aiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiDestroyDelete: async (aiId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aiId' is not null or undefined
            if (aiId === null || aiId === undefined) {
                throw new RequiredError('aiId','Required parameter aiId was null or undefined when calling aiDestroyDelete.');
            }
            const localVarPath = `/ai/destroy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (aiId !== undefined) {
                localVarQueryParameter['ai_id'] = aiId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - get-farmer-ais
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiGetFarmerAisGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ai/get-farmer-ais`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - get
         * @param {number} aiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiGetGet: async (aiId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aiId' is not null or undefined
            if (aiId === null || aiId === undefined) {
                throw new RequiredError('aiId','Required parameter aiId was null or undefined when calling aiGetGet.');
            }
            const localVarPath = `/ai/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (aiId !== undefined) {
                localVarQueryParameter['ai_id'] = aiId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - new-name
         * @param {number} folderId 
         * @param {number} version 
         * @param {string} name 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiNewNamePostForm: async (folderId: number, version: number, name: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling aiNewNamePostForm.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling aiNewNamePostForm.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling aiNewNamePostForm.');
            }
            const localVarPath = `/ai/new-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (folderId !== undefined) {
                localVarQueryParameter['folder_id'] = folderId;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - rename
         * @param {number} aiId 
         * @param {string} newName 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiRenamePostForm: async (aiId: number, newName: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aiId' is not null or undefined
            if (aiId === null || aiId === undefined) {
                throw new RequiredError('aiId','Required parameter aiId was null or undefined when calling aiRenamePostForm.');
            }
            // verify required parameter 'newName' is not null or undefined
            if (newName === null || newName === undefined) {
                throw new RequiredError('newName','Required parameter newName was null or undefined when calling aiRenamePostForm.');
            }
            const localVarPath = `/ai/rename`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (aiId !== undefined) {
                localVarQueryParameter['ai_id'] = aiId;
            }

            if (newName !== undefined) {
                localVarQueryParameter['new_name'] = newName;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - restore
         * @param {number} aiId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiRestorePostForm: async (aiId: number, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aiId' is not null or undefined
            if (aiId === null || aiId === undefined) {
                throw new RequiredError('aiId','Required parameter aiId was null or undefined when calling aiRestorePostForm.');
            }
            const localVarPath = `/ai/restore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (aiId !== undefined) {
                localVarQueryParameter['ai_id'] = aiId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - save
         * @param {number} aiId 
         * @param {string} code 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiSavePostForm: async (aiId: number, code: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aiId' is not null or undefined
            if (aiId === null || aiId === undefined) {
                throw new RequiredError('aiId','Required parameter aiId was null or undefined when calling aiSavePostForm.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling aiSavePostForm.');
            }
            const localVarPath = `/ai/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (aiId !== undefined) {
                localVarQueryParameter['ai_id'] = aiId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - strict
         * @param {number} aiId 
         * @param {boolean} strict 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiStrictPut: async (aiId: number, strict: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aiId' is not null or undefined
            if (aiId === null || aiId === undefined) {
                throw new RequiredError('aiId','Required parameter aiId was null or undefined when calling aiStrictPut.');
            }
            // verify required parameter 'strict' is not null or undefined
            if (strict === null || strict === undefined) {
                throw new RequiredError('strict','Required parameter strict was null or undefined when calling aiStrictPut.');
            }
            const localVarPath = `/ai/strict`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (aiId !== undefined) {
                localVarQueryParameter['ai_id'] = aiId;
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - sync
         * @param {any} ais 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiSyncPostForm: async (ais: any, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ais' is not null or undefined
            if (ais === null || ais === undefined) {
                throw new RequiredError('ais','Required parameter ais was null or undefined when calling aiSyncPostForm.');
            }
            const localVarPath = `/ai/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (ais !== undefined) {
                localVarQueryParameter['ais'] = ais;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - test-scenario
         * @param {number} scenarioId 
         * @param {number} aiId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiTestScenarioPostForm: async (scenarioId: number, aiId: number, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scenarioId' is not null or undefined
            if (scenarioId === null || scenarioId === undefined) {
                throw new RequiredError('scenarioId','Required parameter scenarioId was null or undefined when calling aiTestScenarioPostForm.');
            }
            // verify required parameter 'aiId' is not null or undefined
            if (aiId === null || aiId === undefined) {
                throw new RequiredError('aiId','Required parameter aiId was null or undefined when calling aiTestScenarioPostForm.');
            }
            const localVarPath = `/ai/test-scenario`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (scenarioId !== undefined) {
                localVarQueryParameter['scenario_id'] = scenarioId;
            }

            if (aiId !== undefined) {
                localVarQueryParameter['ai_id'] = aiId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ai - version
         * @param {number} aiId 
         * @param {number} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiVersionPut: async (aiId: number, version: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aiId' is not null or undefined
            if (aiId === null || aiId === undefined) {
                throw new RequiredError('aiId','Required parameter aiId was null or undefined when calling aiVersionPut.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling aiVersionPut.');
            }
            const localVarPath = `/ai/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (aiId !== undefined) {
                localVarQueryParameter['ai_id'] = aiId;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AiApi - functional programming interface
 * @export
 */
export const AiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ai - bin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiBinDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiBinDelete(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - change-folder
         * @param {number} aiId 
         * @param {number} folderId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiChangeFolderPostForm(aiId: number, folderId: number, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiChangeFolderPostForm(aiId, folderId, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - delete
         * @param {number} aiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiDeleteDelete(aiId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiDeleteDelete(aiId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - destroy
         * @param {number} aiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiDestroyDelete(aiId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiDestroyDelete(aiId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - get-farmer-ais
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiGetFarmerAisGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiGetFarmerAisGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - get
         * @param {number} aiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiGetGet(aiId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiGetGet(aiId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - new-name
         * @param {number} folderId 
         * @param {number} version 
         * @param {string} name 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiNewNamePostForm(folderId: number, version: number, name: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiNewNamePostForm(folderId, version, name, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - rename
         * @param {number} aiId 
         * @param {string} newName 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiRenamePostForm(aiId: number, newName: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiRenamePostForm(aiId, newName, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - restore
         * @param {number} aiId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiRestorePostForm(aiId: number, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiRestorePostForm(aiId, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - save
         * @param {number} aiId 
         * @param {string} code 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiSavePostForm(aiId: number, code: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiSavePostForm(aiId, code, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - strict
         * @param {number} aiId 
         * @param {boolean} strict 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiStrictPut(aiId: number, strict: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiStrictPut(aiId, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - sync
         * @param {any} ais 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiSyncPostForm(ais: any, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiSyncPostForm(ais, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - test-scenario
         * @param {number} scenarioId 
         * @param {number} aiId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiTestScenarioPostForm(scenarioId: number, aiId: number, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiTestScenarioPostForm(scenarioId, aiId, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ai - version
         * @param {number} aiId 
         * @param {number} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiVersionPut(aiId: number, version: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AiApiAxiosParamCreator(configuration).aiVersionPut(aiId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AiApi - factory interface
 * @export
 */
export const AiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary ai - bin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiBinDelete(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiBinDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - change-folder
         * @param {number} aiId 
         * @param {number} folderId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiChangeFolderPostForm(aiId: number, folderId: number, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiChangeFolderPostForm(aiId, folderId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - delete
         * @param {number} aiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiDeleteDelete(aiId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiDeleteDelete(aiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - destroy
         * @param {number} aiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiDestroyDelete(aiId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiDestroyDelete(aiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - get-farmer-ais
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiGetFarmerAisGet(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiGetFarmerAisGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - get
         * @param {number} aiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiGetGet(aiId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiGetGet(aiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - new-name
         * @param {number} folderId 
         * @param {number} version 
         * @param {string} name 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiNewNamePostForm(folderId: number, version: number, name: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiNewNamePostForm(folderId, version, name, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - rename
         * @param {number} aiId 
         * @param {string} newName 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiRenamePostForm(aiId: number, newName: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiRenamePostForm(aiId, newName, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - restore
         * @param {number} aiId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiRestorePostForm(aiId: number, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiRestorePostForm(aiId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - save
         * @param {number} aiId 
         * @param {string} code 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiSavePostForm(aiId: number, code: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiSavePostForm(aiId, code, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - strict
         * @param {number} aiId 
         * @param {boolean} strict 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiStrictPut(aiId: number, strict: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiStrictPut(aiId, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - sync
         * @param {any} ais 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiSyncPostForm(ais: any, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiSyncPostForm(ais, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - test-scenario
         * @param {number} scenarioId 
         * @param {number} aiId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiTestScenarioPostForm(scenarioId: number, aiId: number, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiTestScenarioPostForm(scenarioId, aiId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ai - version
         * @param {number} aiId 
         * @param {number} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiVersionPut(aiId: number, version: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AiApiFp(configuration).aiVersionPut(aiId, version, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AiApi - object-oriented interface
 * @export
 * @class AiApi
 * @extends {BaseAPI}
 */
export class AiApi extends BaseAPI {
    /**
     * 
     * @summary ai - bin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiBinDelete(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiBinDelete(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - change-folder
     * @param {number} aiId 
     * @param {number} folderId 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiChangeFolderPostForm(aiId: number, folderId: number, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiChangeFolderPostForm(aiId, folderId, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - delete
     * @param {number} aiId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiDeleteDelete(aiId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiDeleteDelete(aiId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - destroy
     * @param {number} aiId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiDestroyDelete(aiId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiDestroyDelete(aiId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - get-farmer-ais
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiGetFarmerAisGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiGetFarmerAisGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - get
     * @param {number} aiId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiGetGet(aiId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiGetGet(aiId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - new-name
     * @param {number} folderId 
     * @param {number} version 
     * @param {string} name 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiNewNamePostForm(folderId: number, version: number, name: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiNewNamePostForm(folderId, version, name, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - rename
     * @param {number} aiId 
     * @param {string} newName 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiRenamePostForm(aiId: number, newName: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiRenamePostForm(aiId, newName, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - restore
     * @param {number} aiId 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiRestorePostForm(aiId: number, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiRestorePostForm(aiId, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - save
     * @param {number} aiId 
     * @param {string} code 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiSavePostForm(aiId: number, code: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiSavePostForm(aiId, code, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - strict
     * @param {number} aiId 
     * @param {boolean} strict 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiStrictPut(aiId: number, strict: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiStrictPut(aiId, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - sync
     * @param {any} ais 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiSyncPostForm(ais: any, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiSyncPostForm(ais, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - test-scenario
     * @param {number} scenarioId 
     * @param {number} aiId 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiTestScenarioPostForm(scenarioId: number, aiId: number, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiTestScenarioPostForm(scenarioId, aiId, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ai - version
     * @param {number} aiId 
     * @param {number} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public async aiVersionPut(aiId: number, version: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AiApiFp(this.configuration).aiVersionPut(aiId, version, options).then((request) => request(this.axios, this.basePath));
    }
}
